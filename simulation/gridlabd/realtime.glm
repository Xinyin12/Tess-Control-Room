// test/main.glm
//
// TESS General Testing Model
//
// This model is used to simulate a TESS system in realtime. It is configured using the file "config.glm".
//

#include "main.glm"

//
// Runtime configuration
///

#define PYTHON_OPTIONS=progress,debug,verbose
#define SQLITE_DATABASE=:memory:
#define SQLITE_SCHEMA=schema.sql
#define AGENT_COUNT=10
#define UTILITY_NAME=Sim_Utility
#define FEEDER_NAMES=Feeder_1

#ifexist "config.glm"
#include "config.glm"
#endif

//
// Starttime - use the 'wayback' variable to set how far back to go before dropping into realtime mode
//

#begin python
import sys
import datetime as dt
wayback = dict(hours=-1)
import pytz
starttime = (dt.datetime.now(pytz.timezone('US/Eastern'))+dt.timedelta(**wayback)).strftime('%Y-%m-%d %H:00:00')
#end

clock
{
    // do not localize until python code is made TZ aware
    timezone "US/MA/Boston";
    starttime ${PYTHON starttime};
#ifdef TEST
    stoptime ${PYTHON dt.datetime.now(pytz.timezone('US/Eastern')).strftime('%Y-%m-%d %H:00:00')};
#else
    stoptime "NEVER";
#endif
}

//
// Devices
//

object device
{
    name ${UTILITY_NAME};
    type "RD";
    groupid "utility";
    on_init "python:main.utility_init";
}

//
// Agents
//

#for FEEDER in ${FEEDER_NAMES}
object device
{
    source ${UTILITY_NAME};
    name ${FEEDER}_capacity;
    groupid "feeder";
    type "CD";
}
object device
{
    source ${UTILITY_NAME};
    name ${FEEDER}_storage;
    groupid "storage";
    type "SD";
}
object auction 
{
    name "${FEEDER}_constraint_auction";
    resource_id ${FEEDER}_capacity;
    interval 60;
    units "MW";
    price_mean 50.0;
    price_std 10.0;
    price_floor 0.0;
    price_ceiling 100.0;
    quantity_mean 5.0;
    quantity_std 1.0;
    quantity_floor 0.0;
    quantity_ceiling 10.0;
}

object auction
{
    name "${FEEDER}_storage_auction";
    resource_id ${FEEDER}_storage;
    units "MWh";
    interval 300;
    price_mean 5.0;
    price_std 1.0;
    price_floor 0.0;
    price_ceiling 10.0;
    quantity_mean 50.0;
    quantity_std 1.0;
    quantity_floor 0.0;
    quantity_ceiling 100.0;
}

object agent:..${AGENT_COUNT}
{
    storage_auction "${FEEDER}_storage_auction";
    constraint_auction "${FEEDER}_constraint_auction";
    resource_id ${FEEDER};
    on_init "python:main.agent_init";
    object device
    {
        agent `{parent}`;
        source "${FEEDER}_capacity";
        groupid "device";
        type "HC";
        power_max 10 kW;
        power_quantity random.triangle(0.005,0.01);
        power_price random.triangle(0,100);
    };
    object device
    {
        agent `{parent}`;
        source "${FEEDER}_capacity";
        groupid "device";
        type "HW";
        power_max 10 kW;
        power_quantity random.triangle(0.005,0.01);
        power_price random.triangle(0,100);
    };
    object device
    {
        agent `{parent}`;
        power_max -10 kW;
        power_quantity random.triangle(-0.010,-0.005);
        power_price 0.0;
        source "${FEEDER}_capacity";
        groupid "device";
        type "PV";
        flexible POWER;
    };
    object device
    {
        agent `{parent}`;
        power_max 10 kW;
        power_quantity random.triangle(0.005,0.01);
        power_price random.triangle(0,100);
        source "${FEEDER}_capacity";
        groupid "device";
        type "EV";
        flexible POWER|ENERGY;
    };
    object device
    {
        agent `{parent}`;
        energy_max 100 kWh;
        energy_quantity random.triangle(0,0.1);
        energy_price random.triangle(0,10);
        source "${FEEDER}_storage";
        groupid "device";
        type "ES";
        flexible ENERGY;
    };
}
#done

#set dumpfile=gridlabd.json
